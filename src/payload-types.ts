/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    rangers: Ranger;
    teams: Team;
    rangerCards: RangerCard;
    zords: Zord;
    megazords: Megazord;
    tags: Tag;
    media: Media;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    rangers: RangersSelect<false> | RangersSelect<true>;
    teams: TeamsSelect<false> | TeamsSelect<true>;
    rangerCards: RangerCardsSelect<false> | RangerCardsSelect<true>;
    zords: ZordsSelect<false> | ZordsSelect<true>;
    megazords: MegazordsSelect<false> | MegazordsSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rangers".
 */
export interface Ranger {
  id: number;
  status: 'draft' | 'published';
  /**
   * The character's name (e.g., Jason Lee Scott, Alpha 5).
   */
  name: string;
  title: string;
  abilityName: string;
  ability: string;
  isOncePerBattle?: boolean | null;
  team: number | Team;
  color:
    | 'red'
    | 'blue'
    | 'black'
    | 'yellow'
    | 'pink'
    | 'green'
    | 'white'
    | 'gold'
    | 'silver'
    | 'shadow'
    | 'crimson'
    | 'navy'
    | 'orange'
    | 'purple'
    | 'zenith'
    | 'dark';
  type: 'core' | 'sixth' | 'extra' | 'ally';
  source: 'official' | 'tough' | 'user';
  tags?: (number | null) | Tag;
  /**
   * Descriptive title on bottom of each card
   */
  cardTitle?: string | null;
  /**
   * The cards included in this Ranger's specific deck.
   */
  deck?:
    | {
        card: number | RangerCard;
        /**
         * How many copies of this card are in the deck.
         */
        count: number;
        overrideName?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Represents a Power Rangers team season (e.g., Mighty Morphin, Zeo).
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams".
 */
export interface Team {
  id: number;
  status: 'draft' | 'published';
  /**
   * The official name of the Power Rangers team/season.
   */
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  status: 'draft' | 'published';
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rangerCards".
 */
export interface RangerCard {
  id: number;
  status: 'draft' | 'published';
  energyCost: 'X' | '0' | '1' | '2' | '3' | '4';
  name: string;
  type: 'ATTACK' | 'ATTACK: SPECIAL' | 'MANEUVER' | 'REACTION';
  description?: string | null;
  shields: '0' | '1' | '2' | '3';
  /**
   * How many Dice?
   */
  attackDice?: number | null;
  /**
   * How much flat damage?
   */
  attackHit?: number | null;
  iconAbility?: {
    icon?: ('STAR' | 'KING' | 'GIFT') | null;
    description?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "zords".
 */
export interface Zord {
  id: number;
  status: 'draft' | 'published';
  name: string;
  team: (number | Team)[];
  ability: string;
  isAny?: boolean | null;
  whichAnyTeam?: (number | null) | Team;
  /**
   * e.g., Dino Zords, Thunder Zords, Ninjazord System, Other MMPR Zords.
   */
  subcategory?: string | null;
  /**
   * Direct link to Ranger entries that can use this Zord. Based on the 'rangers' array in source data.
   */
  compatibleRangers: (number | Ranger)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "megazords".
 */
export interface Megazord {
  id: number;
  status: 'draft' | 'published';
  name: string;
  team: (number | Team)[];
  ability: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  type: 'super' | 'admin' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'rangers';
        value: number | Ranger;
      } | null)
    | ({
        relationTo: 'teams';
        value: number | Team;
      } | null)
    | ({
        relationTo: 'rangerCards';
        value: number | RangerCard;
      } | null)
    | ({
        relationTo: 'zords';
        value: number | Zord;
      } | null)
    | ({
        relationTo: 'megazords';
        value: number | Megazord;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rangers_select".
 */
export interface RangersSelect<T extends boolean = true> {
  status?: T;
  name?: T;
  title?: T;
  abilityName?: T;
  ability?: T;
  isOncePerBattle?: T;
  team?: T;
  color?: T;
  type?: T;
  source?: T;
  tags?: T;
  cardTitle?: T;
  deck?:
    | T
    | {
        card?: T;
        count?: T;
        overrideName?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams_select".
 */
export interface TeamsSelect<T extends boolean = true> {
  status?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rangerCards_select".
 */
export interface RangerCardsSelect<T extends boolean = true> {
  status?: T;
  energyCost?: T;
  name?: T;
  type?: T;
  description?: T;
  shields?: T;
  attackDice?: T;
  attackHit?: T;
  iconAbility?:
    | T
    | {
        icon?: T;
        description?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "zords_select".
 */
export interface ZordsSelect<T extends boolean = true> {
  status?: T;
  name?: T;
  team?: T;
  ability?: T;
  isAny?: T;
  whichAnyTeam?: T;
  subcategory?: T;
  compatibleRangers?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "megazords_select".
 */
export interface MegazordsSelect<T extends boolean = true> {
  status?: T;
  name?: T;
  team?: T;
  ability?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  status?: T;
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  type?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}